# modules/xml_generator.py
"""
Модуль генерации RDF/XML с поддержкой внешних uid и CCK-кодов.
"""

from typing import List, Tuple, Dict
from uuid import uuid5, NAMESPACE_X500
import logging
from .config_manager import get_config_manager
from collections import defaultdict
from queue import Queue


class XMLGenerator:
    """
    Генератор RDF/XML с поддержкой внешних uid и описаний (CCK).
    """

    def __init__(self):
        self.config = get_config_manager().config
        xml_config = self.config["xml_generation"]
        self.logger = logging.getLogger("xml_generator")

        self.namespaces = xml_config["namespaces"]
        self.logger.debug(
            f"Загружены пространства имён: {list(self.namespaces.keys())}")

        self.model_id = f"#_{xml_config['model_id']}"
        self.model_created = xml_config["model_created"]
        self.model_version = xml_config["model_version"]
        self.model_name = xml_config["model_name"]

        self.logger.info("Инициализация XMLGenerator завершена")

    def _generate_id(self, path: Tuple[str, ...]) -> str:
        """Генерирует стабильный UUID на основе пути."""
        path_str = " -> ".join(path)
        return f"#_{uuid5(NAMESPACE_X500, path_str).hex}"

    def generate(
        self,
        paths: List[Tuple[str, ...]],
        external_children: Dict[Tuple[str, ...], List[str]],
        parent_uid: str,
        cck_map: Dict[Tuple[str, ...], str],
        uid_map: Dict[Tuple[str, ...], str]
    ) -> str:
        """
        Генерирует RDF/XML с правильными связями:
        - AssetContainer: <cim:Asset.AssetContainer rdf:resource="#_{uid_родителя}" />
        - GenericPSR: <cim:PowerSystemResource.Assets rdf:resource="#_{uid_родителя}" />
        """
        from collections import defaultdict
        from queue import Queue

        self.logger = logging.getLogger("xml_generator")
        self.logger.info("Начало генерации RDF/XML")
        self.logger.debug(
            f"Входные данные: {len(paths)} путей, {sum(len(v) for v in external_children.values())} внешних uid")

        if not paths:
            self.logger.error("Нет данных для генерации")
            raise ValueError("Пустая иерархия")

        cck_map = cck_map or {}
        uid_map = uid_map or {}

        # === 1. Построение дерева ===
        all_nodes = set()
        children_map = defaultdict(list)
        parent_map = {}

        for path in paths:
            for i in range(1, len(path)):
                parent = tuple(path[:i])
                child = tuple(path[:i+1])
                if child not in children_map[parent]:
                    children_map[parent].append(child)
                parent_map[child] = parent
            for i in range(1, len(path) + 1):
                all_nodes.add(tuple(path[:i]))

        leaf_nodes = {node for node in all_nodes if not children_map.get(node)}
        id_map = {node: self._generate_id(node) for node in all_nodes}

        self.logger.debug(
            f"Построено дерево: {len(all_nodes)} узлов, {len(leaf_nodes)} листьев")

        # === 2. Формирование XML ===
        lines = []

        # Шапка
        lines.append('<?xml version="1.0" encoding="utf-8"?>')
        lines.append('<?iec61970-552 version="2.0"?>')
        lines.append('<?floatExporter 1?>')

        rdf_open = '<rdf:RDF'
        for prefix, uri in self.namespaces.items():
            rdf_open += f' xmlns:{prefix}="{uri}"'
        rdf_open += '>'
        lines.append(rdf_open)

        # FullModel
        full_model_id = f"#_{self.config['xml_generation']['model_id']}"
        lines.append(f'  <md:FullModel rdf:about="{full_model_id}">')
        lines.append(
            f'    <md:Model.created>{self.model_created}</md:Model.created>')
        lines.append(
            f'    <md:Model.version>{self.model_version}</md:Model.version>')
        lines.append(f'    <me:Model.name>{self.model_name}</me:Model.name>')
        lines.append('  </md:FullModel>')

        lines.append('  <!-- Generated by XMLGenerator -->')
        lines.append('  <!-- IEC 61970 CIM RDF/XML Model -->')

        # === 3. Генерация объектов ===
        processed = set()
        q = Queue()

        root_paths = [path for path in paths if len(path) == 1]
        for root in root_paths:
            q.put(root)

        nodes_added = 0

        while not q.empty():
            current = q.get()
            if current in processed:
                continue
            processed.add(current)
            nodes_added += 1

            current_id = id_map[current]
            is_leaf = (current not in children_map or not children_map[current]) and \
                (current not in external_children or not external_children[current])

            # Определяем тип элемента
            if len(current) == 1:
                element_type = "cim:AssetContainer"
                open_tag = f'  <{element_type} rdf:about="{current_id}">'
                close_tag = '  </cim:AssetContainer>'
            elif is_leaf:
                element_type = "me:GenericPSR"
                open_tag = f'  <{element_type} rdf:about="{current_id}">'
                close_tag = '  </me:GenericPSR>'
            else:
                element_type = "cim:AssetContainer"
                open_tag = f'  <{element_type} rdf:about="{current_id}">'
                close_tag = '  </cim:AssetContainer>'

            # Добавляем открывающий тег
            lines.append(open_tag)

            # Имя объекта
            lines.append(
                f'    <cim:IdentifiedObject.name>{current[-1]}</cim:IdentifiedObject.name>')

            # === ParentObject (всегда) ===
            if len(current) == 1:
                # Корень
                lines.append(
                    f'    <me:IdentifiedObject.ParentObject rdf:resource="{parent_uid}" />')
                parent_resource = parent_uid  # уже #_
            else:
                # Обычный объект
                parent_path = parent_map[current]
                parent_uid_value = uid_map.get(parent_path)
                if parent_uid_value:
                    parent_resource = f"#_{parent_uid_value}"
                else:
                    parent_resource = id_map[parent_path]  # fallback: ID
                lines.append(
                    f'    <me:IdentifiedObject.ParentObject rdf:resource="{parent_resource}" />')

            # === Связи по типу объекта ===
            if element_type == "cim:AssetContainer":
                # AssetContainer: связь Asset.AssetContainer -> #_{uid родителя}
                lines.append(
                    f'    <cim:Asset.AssetContainer rdf:resource="{parent_resource}" />')

            elif element_type == "me:GenericPSR":
                # GenericPSR: связь PowerSystemResource.Assets -> #_{uid родителя}
                lines.append(
                    f'    <cim:PowerSystemResource.Assets rdf:resource="{parent_resource}" />')

            # === CCK Code (описание) ===
            cck_value = cck_map.get(current, "")
            if cck_value:
                lines.append(
                    f'    <cim:IdentifiedObject.description>{cck_value}</cim:IdentifiedObject.description>')

            # === Дочерние объекты (ChildObjects) — только для AssetContainer ===
            if element_type == "cim:AssetContainer":
                added_children = set()

                # Обычные дети (по пути)
                if current in children_map:
                    for child in children_map[current]:
                        child_id = id_map[child]
                        if child_id not in added_children:
                            lines.append(
                                f'    <me:IdentifiedObject.ChildObjects rdf:resource="{child_id}" />')
                            added_children.add(child_id)
                            q.put(child)

                # Внешние дети (по UID)
                if current in external_children:
                    for uid in external_children[current]:
                        ext_id = f"#_{uid}"
                        if ext_id not in added_children:
                            lines.append(
                                f'    <me:IdentifiedObject.ChildObjects rdf:resource="{ext_id}" />')
                            added_children.add(ext_id)

            # Закрываем тег
            lines.append(close_tag)

        # Закрываем rdf:RDF
        lines.append('</rdf:RDF>')
        self.logger.info(
            f"Генерация XML завершена. Всего добавлено узлов: {nodes_added}")
        return '\n'.join(lines)
